{"version":3,"sources":["api/request.ts","api/episode.ts","components/Loader/Loader.tsx","api/poster.ts","components/Poster/Poster.tsx","components/CharacterSmall/CharacterSmall.tsx","components/Episode/Episode.tsx","components/Season/Season.tsx","components/Series/Series.tsx","components/AllSeasons/AllSeasons.tsx","api/character.ts","App.tsx","index.tsx"],"names":["BASE_URL","request","url","a","options","method","console","log","fetch","response","ok","Promise","reject","status","statusText","json","getAllEpisodes","series","Loader","className","requestPoster","Poster","nameOfSeries","useState","showLoaderPoster","setShowLoaderPoster","urlPoster","setUrlPoster","loadPoster","urlPosterFromServer","useEffect","style","backgroundImage","CharacterSmall","characterName","allCharacters","char_id","Episode","episode","episode_id","title","season","air_date","characters","episode_id_season","map","character","Season","seasonId","showSeason","setShowSeason","type","onClick","Series","AllSeasons","SetAllSeasons","showSeries","setShoeSeries","Object","keys","sort","window","innerWidth","showLoaderSeasons","setShowLoaderSeasons","allEpisodes","setAllEpisodes","defaultOrderSeries","setDefaultOrderSeries","setAllCharacters","loadAndPrepareDataFromServer","all","allEpisodesFromServer","allCharactersFromServer","errorDataIndex","findIndex","e","preparedAllEpisodes","forEach","push","defaultOrderSeriesFromServer","b","localeCompare","preparedAllCharacters","name","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.03b19813.chunk.js","sourcesContent":["export const BASE_URL = 'https://www.breakingbadapi.com/api';\n\ntype requestOption = {\n  method: string;\n  headers?: {\n    'Content-type': string;\n  };\n  body?: string;\n};\n\nexport const request = async (\n  url: string,\n  options: requestOption = {\n    method: 'GET',\n  },\n) => {\n  // eslint-disable-next-line no-console\n  console.log(`request to: ${BASE_URL}${url}`);\n\n  // eslint-disable-next-line no-console\n  console.log('request options:', options);\n\n  const response = await fetch(`${BASE_URL}${url}`, options);\n\n  if (!response.ok) {\n    // eslint-disable-next-line prefer-promise-reject-errors\n    return Promise.reject(\n      `${response.status} - ${response.statusText}`,\n    );\n  }\n\n  return response.json();\n};\n","import { request } from './request';\nimport episodes from '../data/json/episodes.json';\nimport episodesBreakingBad from '../data/json/episodesBreakingBad.json';\nimport episodesBetterCallSaul from '../data/json/episodesBetterCallSaul.json';\n\nexport const getEpisode = (episodeId: string) => request(`/episodes/${episodeId}`);\n\nexport const getAllEpisodes = (series = '') => {\n  switch (series) {\n    case 'Breaking Bad':\n      return request(\n        '/episodes?series=Breaking+Bad',\n      );\n\n    case 'Better Call Saul':\n      return request(\n        '/episodes?series=Breaking+Bad',\n      );\n\n    default:\n      return request('/episodes/');\n  }\n};\n\nexport const getAllEpisodesBreakingBad = () => request(\n  '/episodes?series=Breaking+Bad',\n);\n\nexport const getAllEpisodesBetterCallSaul = () => request(\n  '/episodes?series=Better+Call+Saul',\n);\n\n// offline:\nexport const getAllEpisodesBreakingBadOffline = () => episodesBreakingBad;\n\nexport const getAllEpisodesBetterCallSaulOffline = () => episodesBetterCallSaul;\n\nexport const getAllEpisodesOffline = (series = '') => {\n  switch (series) {\n    case 'Breaking Bad':\n      return episodesBreakingBad;\n\n    case 'Better Call Saul':\n      return episodesBetterCallSaul;\n\n    default:\n      return episodes;\n  }\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export const BASE_URL = 'http://www.omdbapi.com';\n\ntype requestOption = {\n  method: string;\n  headers?: {\n    'Content-type': string;\n  };\n  body?: string;\n};\n\nexport const requestPoster = async (\n  url: string,\n  options: requestOption = {\n    method: 'GET',\n  },\n) => {\n  // eslint-disable-next-line no-console\n  console.log(`request to: ${BASE_URL}/?t=${url}&apikey=8327dd52`);\n\n  // eslint-disable-next-line no-console\n  console.log('request options:', options);\n\n  const response = await fetch(`${BASE_URL}/?t=${url}&apikey=8327dd52`);\n\n  if (!response.ok) {\n    // eslint-disable-next-line prefer-promise-reject-errors\n    return Promise.reject(\n      `${response.status} - ${response.statusText}`,\n    );\n  }\n\n  return response.json();\n};\n","import React, {\n  useEffect, useState,\n} from 'react';\nimport { requestPoster } from '../../api/poster';\nimport { Loader } from '../Loader';\nimport './Poster.scss';\n\ntype Props = {\n  nameOfSeries: string;\n};\n\nexport const Poster: React.FC<Props> = ({ nameOfSeries }) => {\n  // eslint-disable-next-line no-console\n  console.log(nameOfSeries);\n  const [showLoaderPoster, setShowLoaderPoster] = useState(false);\n  const [urlPoster, setUrlPoster] = useState('');\n\n  const loadPoster = async () => {\n    setShowLoaderPoster(true);\n\n    try {\n      const urlPosterFromServer = await requestPoster(nameOfSeries);\n\n      setUrlPoster(urlPosterFromServer.Poster);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log('error', error);\n    } finally {\n      setShowLoaderPoster(false);\n    }\n  };\n\n  useEffect(() => {\n    loadPoster();\n  },\n  []);\n\n  // eslint-disable-next-line no-console\n  console.log(urlPoster);\n\n  return (\n    <div\n      className=\"Poster\"\n      style={{ backgroundImage: `url(\"${urlPoster}\")` }}\n    >\n      {showLoaderPoster && (\n        <Loader />\n      )}\n    </div>\n  );\n};\n","/* eslint-disable react/jsx-no-comment-textnodes */\nimport React, { useEffect } from 'react';\nimport './CharacterSmall.scss';\n\ntype Props = {\n  characterName: string;\n  allCharacters: {[key: string]: CharacterType} | null;\n};\n\nexport const CharacterSmall: React.FC<Props> = ({ characterName, allCharacters }) => {\n  // eslint-disable-next-line no-console\n  console.log('characterName', characterName);\n\n  if (allCharacters && allCharacters[characterName]) {\n    // eslint-disable-next-line no-console\n    console.log(allCharacters[characterName].char_id);\n  }\n\n  useEffect(() => {\n  },\n  []);\n\n  return (\n    <div\n      className=\"CharacterSmall\"\n      // style={allCharacters && { backgroundImage: `url(\"${allCharacters[characterName].img}\")` }}\n    >\n      {characterName}\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { CharacterSmall } from '../CharacterSmall';\nimport './Episode.scss';\n\ntype Props = {\n  episode: EpisodeType;\n  allCharacters: {[key: string]: CharacterType} | null;\n};\n\nexport const Episode: React.FC<Props> = ({\n  episode,\n  allCharacters,\n}) => {\n  const {\n    episode_id,\n    title,\n    season,\n    air_date,\n    characters,\n    episode: episode_id_season,\n  } = episode;\n\n  useEffect(() => {\n  },\n  []);\n\n  return (\n    <div className=\"Episode\">\n      <div className=\"Episode__episode_id\">{episode_id}</div>\n      <div className=\"Episode__season\">{`Season: ${season}/${episode_id_season}`}</div>\n      <div className=\"Episode__title\">{title}</div>\n      <div className=\"Episode__air_date\">{air_date}</div>\n      <ul className=\"Episode__characters\">\n        {characters.map(character => (\n          <li key={character}>\n            {/* {character} */}\n            <CharacterSmall\n              characterName={character}\n              allCharacters={allCharacters}\n            />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, {\n  useEffect,\n  useState,\n} from 'react';\nimport { Episode } from '../Episode';\nimport './Season.scss';\n\ntype Props = {\n  seasonId: string;\n  season: EpisodeType[];\n  allCharacters: {[key: string]: CharacterType} | null;\n};\n\nexport const Season: React.FC<Props> = ({ season, seasonId, allCharacters }) => {\n  const [showSeason, setShowSeason] = useState(false);\n\n  const showSeasonHandler = () => {\n    setShowSeason(!showSeason);\n  };\n\n  useEffect(() => {\n    // eslint-disable-next-line no-console\n    console.log(`Season ${seasonId} mounted`);\n  },\n  []);\n\n  return (\n    <div className=\"Season\">\n      <button\n        type=\"button\"\n        onClick={() => showSeasonHandler()}\n        className=\"Season__button\"\n      >\n        <p>{`Season ${seasonId}`}</p>\n      </button>\n\n      {showSeason && (\n        <ul className=\"Season__List\">\n          {season.map((episode: EpisodeType) => (\n            <li\n              key={episode.episode_id}\n              className=\"Season__Item\"\n            >\n              <Episode\n                episode={episode}\n                allCharacters={allCharacters}\n              />\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n","import React, {\n  useEffect, useState,\n} from 'react';\nimport { Poster } from '../Poster';\nimport { Season } from '../Season';\nimport './Series.scss';\n\ntype Props = {\n  nameOfSeries: string;\n  series: {[key: string]: EpisodeType[]};\n  allCharacters: {[key: string]: CharacterType} | null;\n};\n\nexport const Series: React.FC<Props> = ({\n  nameOfSeries,\n  series,\n  allCharacters,\n}) => {\n  const [AllSeasons, SetAllSeasons] = useState<string[] | null>(null);\n  const [showSeries, setShoeSeries] = useState(false);\n  // const [windowSize, setWindowSize] = useState();\n\n  const showSeriesHandler = () => {\n    setShoeSeries(!showSeries);\n  };\n\n  useEffect(() => {\n    SetAllSeasons(Object.keys(series).sort());\n  },\n  []);\n\n  // eslint-disable-next-line no-console\n  console.log(window.innerWidth);\n\n  return (\n    <div\n      className=\"Series\"\n    >\n      <button\n        type=\"button\"\n        onClick={() => showSeriesHandler()}\n        className=\"Series__button\"\n      >\n        <Poster\n          nameOfSeries={nameOfSeries}\n        />\n      </button>\n\n      {showSeries && (\n        <>\n\n          <ul className=\"Series__List\">\n            {AllSeasons\n            && AllSeasons.map((seasonId: string) => (\n              <li\n                key={seasonId}\n                className=\"Series__Item\"\n              >\n                <Season\n                  seasonId={seasonId}\n                  season={series[seasonId]}\n                  allCharacters={allCharacters}\n                />\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getAllCharacters } from '../../api/character';\nimport {\n  getAllEpisodes,\n  // getAllEpisodesOffline,\n} from '../../api/episode';\nimport { Loader } from '../Loader';\nimport { Series } from '../Series';\nimport './AllSeasons.scss';\n\nexport const AllSeasons: React.FC = () => {\n  const [showLoaderSeasons, setShowLoaderSeasons] = useState(false);\n  const [allEpisodes, setAllEpisodes] = useState<AllEpisodes | null>(null);\n  const [defaultOrderSeries, setDefaultOrderSeries] = useState<string[] | null>(null);\n  const [allCharacters, setAllCharacters] = useState<{[key: string]: CharacterType} | null>(null);\n\n  const loadAndPrepareDataFromServer = async () => {\n    setShowLoaderSeasons(true);\n\n    try {\n      // LOAD DATA\n      const [\n        allEpisodesFromServer,\n        allCharactersFromServer,\n      ] = await Promise.all([\n        // if online\n        getAllEpisodes(),\n        getAllCharacters(),\n\n        // if offline:\n        // getAllEpisodesOffline(),\n      ]);\n\n      // PREPARE DATA\n      // Prepare Episodes\n      // #region changeMistake in episode{episode_id: 7, season: ' 1'}\n      const errorDataIndex = allEpisodesFromServer\n        .findIndex((e: EpisodeType) => e.season === ' 1');\n\n      allEpisodesFromServer[errorDataIndex].season = '1';\n      // #endregion ChangeMistake\n\n      const preparedAllEpisodes: AllEpisodes = {};\n\n      allEpisodesFromServer.forEach((episode: EpisodeType) => {\n        if (!preparedAllEpisodes[episode.series]) {\n          preparedAllEpisodes[episode.series] = {};\n        }\n\n        if (!preparedAllEpisodes[episode.series][episode.season]) {\n          preparedAllEpisodes[episode.series][episode.season] = [episode];\n        } else {\n          preparedAllEpisodes[episode.series][episode.season].push(episode);\n        }\n      });\n\n      setAllEpisodes(preparedAllEpisodes);\n\n      // sort rule is modifiable\n      const defaultOrderSeriesFromServer = Object.keys(preparedAllEpisodes)\n        .sort((a, b) => -a.localeCompare(b));\n\n      setDefaultOrderSeries(defaultOrderSeriesFromServer);\n\n      // Prepare Characters\n      const preparedAllCharacters: {[key: string]: CharacterType} | null = {};\n\n      allCharactersFromServer.forEach((character: CharacterType) => {\n        preparedAllCharacters[character.name] = character;\n      });\n\n      // eslint-disable-next-line no-console\n      console.log('preparedAllCharacters = ', preparedAllCharacters);\n\n      setAllCharacters(preparedAllCharacters);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log('error', error);\n    } finally {\n      setShowLoaderSeasons(false);\n    }\n  };\n\n  useEffect(() => {\n    loadAndPrepareDataFromServer();\n  },\n  []);\n\n  return (\n    <>\n      {showLoaderSeasons\n        ? (\n          <Loader />\n        ) : (\n          <div className=\"AllSeasons\">\n            <ul className=\"AllSeasonsList\">\n              {allEpisodes && defaultOrderSeries\n              && defaultOrderSeries.map(nameOfSeries => (\n                <li\n                  className=\"AllSeasonsItem\"\n                  key={nameOfSeries}\n                >\n                  <Series\n                    nameOfSeries={nameOfSeries}\n                    series={allEpisodes[nameOfSeries]}\n                    allCharacters={allCharacters}\n                  />\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n    </>\n  );\n};\n","import { request } from './request';\n\nexport const getAllCharacters = () => request('/characters');\n","import React from 'react';\nimport './App.scss';\nimport { AllSeasons } from './components/AllSeasons';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"starter\">\n      <AllSeasons />\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}