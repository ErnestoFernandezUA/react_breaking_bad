{"version":3,"sources":["components/episode/Episode.tsx","components/Loader/Loader.tsx","components/AllSeasons/AllSeasons.tsx","api/episode.ts","App.tsx","index.tsx"],"names":["Episode","episode","episode_id","title","season","air_date","characters","episode_id_season","useEffect","className","map","character","Loader","Seasons","useState","showLoaderSeasons","setShowLoaderSeasons","allEpisodesBreakingBad","setAllEpisodesBreakingBad","allEpisodesBetterCallSaul","setAllEpisodesBetterCallSaul","allSeasonsBreakingBad","setAllSeasonsBreakingBad","allSeasonsBetterCallSaul","setAllSeasonsBetterCallSaul","loadAndPrepareDataFromServer","a","console","log","Promise","all","episodesBreakingBad","episodesBetterCallSaul","allEpisodesBreakingBadFromServer","allEpisodesBetterCallSaulFromServer","errorDataIndex","findIndex","e","preparedEpisodesBreakingBad","i","length","push","preparedEpisodesBetterCallSaul","allSeasonsBreakingBadFromServer","Object","keys","sort","allSeasonsBetterCallSaulFromServer","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7d650a8.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport './Episode.scss';\n\ntype Props = {\n  episode: EpisodeType;\n};\n\nexport const Episode: React.FC<Props> = ({\n  episode,\n}) => {\n  const {\n    episode_id,\n    title,\n    season,\n    air_date,\n    characters,\n    episode: episode_id_season,\n    // series,\n  } = episode;\n\n  useEffect(() => {\n  },\n  []);\n\n  return (\n    <div className=\"Episode\">\n      <p className=\"Episode__episode_id\">{episode_id}</p>\n      <p className=\"Episode__season\">{`Season: ${season}`}</p>\n      <p className=\"Episode__episode_id_season\">{episode_id_season}</p>\n      <p className=\"Episode__title\">{title}</p>\n      <p className=\"Episode__air_date\">{air_date}</p>\n      <ul className=\"Episode__characters\">\n        {characters.map(character => (\n          <li key={character}>{character}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, {\n  useEffect,\n  useState,\n} from 'react';\nimport {\n  // getAllEpisodesBetterCallSaul,\n  // getAllEpisodesBreakingBad,\n  getAllEpisodesBetterCallSaulOffline,\n  getAllEpisodesBreakingBadOffline,\n} from '../../api/episode';\nimport { Episode } from '../episode';\nimport { Loader } from '../Loader';\nimport './AllSeasons.scss';\n\nexport const Seasons: React.FC = () => {\n  const [showLoaderSeasons, setShowLoaderSeasons] = useState(false);\n  const [allEpisodesBreakingBad, setAllEpisodesBreakingBad]\n  = useState<AllEpisodes | null>(null);\n  const [allEpisodesBetterCallSaul, setAllEpisodesBetterCallSaul]\n  = useState<AllEpisodes | null>(null);\n  const [allSeasonsBreakingBad, setAllSeasonsBreakingBad] = useState<string[] | null>(null);\n  const [allSeasonsBetterCallSaul, setAllSeasonsBetterCallSaul] = useState<string[] | null>(null);\n\n  const loadAndPrepareDataFromServer = async () => {\n    // eslint-disable-next-line no-console\n    console.log('loadAndPrepareDataFromServer....................');\n\n    setShowLoaderSeasons(true);\n\n    try {\n      // LOAD DATA\n      const [\n        allEpisodesBreakingBadFromServer,\n        allEpisodesBetterCallSaulFromServer,\n      ] = await Promise.all([\n        // getAllEpisodesBreakingBad(),\n        // getAllEpisodesBetterCallSaul(),\n\n        // if offline:\n        getAllEpisodesBreakingBadOffline(),\n        getAllEpisodesBetterCallSaulOffline(),\n      ]);\n\n      // eslint-disable-next-line no-console\n      // console.log(allEpisodesBreakingBadFromServer);\n\n      // PREPARE DATA\n      // #region changeMistake in episode{episode_id: 7, season: ' 1'}\n      const errorDataIndex = allEpisodesBreakingBadFromServer\n        .findIndex((e: EpisodeType) => e.episode_id === 7);\n\n      allEpisodesBreakingBadFromServer[errorDataIndex].season = '1';\n      // #endregion ChangeMistake\n\n      const preparedEpisodesBreakingBad: { [key: string]: EpisodeType[] } = {};\n\n      // eslint-disable-next-line no-plusplus\n      for (let i = 0; i < allEpisodesBreakingBadFromServer.length; i++) {\n        // eslint-disable-next-line no-console\n        console.log(i, `season BreakingBad ${allEpisodesBreakingBadFromServer[i].season}`, preparedEpisodesBreakingBad);\n\n        if (!preparedEpisodesBreakingBad[allEpisodesBreakingBadFromServer[i].season]) {\n          preparedEpisodesBreakingBad[allEpisodesBreakingBadFromServer[i].season]\n          = [allEpisodesBreakingBadFromServer[i]];\n        } else {\n          preparedEpisodesBreakingBad[allEpisodesBreakingBadFromServer[i].season]\n            .push(allEpisodesBreakingBadFromServer[i]);\n        }\n      }\n\n      const preparedEpisodesBetterCallSaul: { [key: string]: EpisodeType[] } = {};\n\n      // eslint-disable-next-line no-plusplus\n      for (let i = 0; i < allEpisodesBetterCallSaulFromServer.length; i++) {\n        // eslint-disable-next-line no-console\n        console.log(i, `season BetterCallSaul ${allEpisodesBetterCallSaulFromServer[i].season}`, preparedEpisodesBetterCallSaul);\n\n        if (!preparedEpisodesBetterCallSaul[allEpisodesBetterCallSaulFromServer[i].season]) {\n          preparedEpisodesBetterCallSaul[allEpisodesBetterCallSaulFromServer[i].season]\n          = [allEpisodesBetterCallSaulFromServer[i]];\n        } else {\n          preparedEpisodesBetterCallSaul[allEpisodesBetterCallSaulFromServer[i].season]\n            .push(allEpisodesBetterCallSaulFromServer[i]);\n        }\n      }\n\n      setAllEpisodesBreakingBad(preparedEpisodesBreakingBad);\n      setAllEpisodesBetterCallSaul(preparedEpisodesBetterCallSaul);\n\n      const allSeasonsBreakingBadFromServer = Object.keys(preparedEpisodesBreakingBad).sort();\n      const allSeasonsBetterCallSaulFromServer\n      = Object.keys(preparedEpisodesBetterCallSaul).sort();\n\n      setAllSeasonsBreakingBad(allSeasonsBreakingBadFromServer);\n      setAllSeasonsBetterCallSaul(allSeasonsBetterCallSaulFromServer);\n\n      // eslint-disable-next-line no-console\n      console.log('allEpisodesBreakingBad', allEpisodesBreakingBad);\n      // eslint-disable-next-line no-console\n      console.log('allEpisodesBetterCallSaul = ', allEpisodesBetterCallSaul);\n      // eslint-disable-next-line no-console\n      console.log('allSeasonsBreakingBad = ', allSeasonsBreakingBad);\n      // eslint-disable-next-line no-console\n      console.log('allSeasonsBetterCallSaul = ', allSeasonsBetterCallSaul);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log('error', error);\n    } finally {\n      setShowLoaderSeasons(false);\n    }\n  };\n\n  useEffect(() => {\n    loadAndPrepareDataFromServer();\n  },\n  []);\n\n  return (\n    <>\n      {showLoaderSeasons\n        ? (\n          <Loader />\n        ) : (\n          <div className=\"AllSeasons\">\n            <h2>Breaking Bad</h2>\n            <ul className=\"AllSeasonsList\">\n              {allSeasonsBreakingBad\n              && allSeasonsBreakingBad.map(season => (\n                <li\n                  key={season}\n                  className=\"AllSeasonsItem\"\n                >\n                  <h3>{`Season: ${season}`}</h3>\n\n                  {allEpisodesBreakingBad\n                    && (\n                      <ul className=\"SeasonsList\">\n                        {allEpisodesBreakingBad[season].map((episode: EpisodeType) => (\n                          <li\n                            key={episode.episode_id}\n                            className=\"SeasonsItem\"\n                          >\n                            <Episode\n                              episode={episode}\n                            />\n                          </li>\n                        ))}\n                      </ul>\n                    )}\n                </li>\n              ))}\n            </ul>\n\n            <h2>Better Call Saul</h2>\n            <ul className=\"AllSeasonsList\">\n              {allSeasonsBetterCallSaul\n              && allSeasonsBetterCallSaul.map(season => (\n                <li\n                  key={season}\n                  className=\"AllSeasonsItem\"\n                >\n                  <h3>{`Season: ${season}`}</h3>\n                  {allEpisodesBetterCallSaul\n                    && (\n                      <ul className=\"SeasonsList\">\n                        {allEpisodesBetterCallSaul[season].map((episode: EpisodeType) => (\n                          <li\n                            className=\"SeasonsItem\"\n                            key={episode.episode_id}\n                          >\n                            <Episode\n                              episode={episode}\n                            />\n                          </li>\n                        ))}\n                      </ul>\n                    )}\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n    </>\n  );\n};\n","import { request } from './request';\nimport episodesBreakingBad from '../data/episodesBreakingBad.json';\nimport episodesBetterCallSaul from '../data/episodesBetterCallSaul.json';\n\nexport const getEpisode = (episodeId: string) => request(`/episodes/${episodeId}`);\n\nexport const getAllEpisodes = () => request('/episodes/');\n\nexport const getAllEpisodesBreakingBad = () => request(\n  '/episodes?series=Breaking+Bad',\n);\n\nexport const getAllEpisodesBetterCallSaul = () => request(\n  '/episodes?series=Better+Call+Saul',\n);\n\n// offline:\nexport const getAllEpisodesOffline = () => JSON.parse('./../data/episodes.json');\n\nexport const getAllEpisodesBreakingBadOffline = () => episodesBreakingBad;\n\nexport const getAllEpisodesBetterCallSaulOffline = () => episodesBetterCallSaul;\n","import React from 'react';\nimport './App.scss';\nimport { Seasons } from './components/AllSeasons';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"starter\">\n      <Seasons />\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}